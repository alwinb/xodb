import { getUUIDGenerator } from './uuidgen.js'
const { assign } = Object
const log = console.log.bind (console)

// Xochitl Entities
// ================
// These are parameterised by an uuidgen function,
// for, depending on the platform, getting access to the generator
// may be an asynchronous operation and I don't want to make the
// entity constructors asynchronous themselves for that. 

async function XochitlEntities () {

  const uuidgen = await getUUIDGenerator ()

  return {
    uuidgen,
    UnknownEntity,
    VFolder,
    Folder,
    RootFolder,
    TrashFolder,
    PDFDocument,
    EPubDocument,
    Notebook,
    NotebookPage,
  }

  // ## Metadata base

  function _makeMetadata (obj) {
    const base = {
      parent: '',
      deleted: false,
      modified: true,
      lastModified: Date.now (), // REVIEW UTC
      metadatamodified: true,
      pinned: false,
      synced: false,
      version: 0,
    }
    return assign (base, obj)
  }

  // ## DocumentType base

  function _makeDocument (fileType, name, parentUUID, _uuid) {
    this.name = name
    this.uuid = _uuid
    const _page_uuid = uuidgen ()

    this.metadata = _makeMetadata ({
      type: "DocumentType",
      visibleName: name,
      parent: parentUUID,
      lastOpenedPage: 0,
    })

    this.content = {
      fileType,
      orientation: "portrait",
      pageCount: 1,
      pages: [ _page_uuid ],
      coverPageNumber: 0,
      dummyDocument: false,
    }
  }


  // Missing / UnknownEntity
  // -----------------------

  function UnknownEntity (uuid) {
    this.uuid = uuid
    this.children = []
  }


  // 'Virtual Folder'
  // ----------------

  function VFolder (name) {
    this.name = name
    this.children = []
    this.metadata = {
      type: "CollectionType",
      visibleName: name,
    }
  }


  // Folder
  // ------
  // <uuid>.metadata

  function Folder (name, parentUUID = '', _uuid = uuidgen ()) {
    this.name = name
    this.uuid = _uuid
    this.children = []

    this.metadata = _makeMetadata ({
      type: "CollectionType",
      visibleName: name,
      parent: parentUUID,
    })
  }

  function RootFolder (name = 'My Files') {
    return Object.setPrototypeOf ({
      name: name,
      uuid: '',
      metadata: {
        type: "CollectionType",
        visibleName: name,
        parent: '',
      }
    }, Folder.prototype)
  }

  function TrashFolder (name = 'Trash') {
    return Object.setPrototypeOf ({
      name: name,
      uuid: 'trash',
      metadata: {
        type: "CollectionType",
        visibleName: name,
        parent: 'trash',
      }
    }, Folder.prototype)
  }

  // PDF document
  // ------------
  // <uuid>.metadata
  // <uuid>.content
  // <uuid>.pdf - NB. must be added manually

  function PDFDocument (name, parentUUID = '', _uuid = uuidgen ()) {
    _makeDocument.call (this, 'pdf', name, parentUUID, _uuid)
  }


  // EPub Document
  // -------------
  // <uuid>.metadata
  // <uuid>.content
  // <uuid>.epubindex - NB. must be added manually
  // <uuid>.pdf - I assume this is generated by xochilt

  function EPubDocument (name, parentUUID = '', uuid = uuidgen ()) {
    _makeDocument.call (this, 'epub', name, parentUUID, _uuid)
  }


  // Notebook
  // --------

  function Notebook (name, parentUUID = '', _uuid = uuidgen ()) {
    _makeDocument.call (this, 'notebook', name, parentUUID, _uuid)
    const _page_uuid = uuidgen ()
    // first page
    this.content.pageCount = 1
    this.content.pages = [ _page_uuid ]
  }


  // Notebook page
  // -------------
  // REVIEW, how to expose this in the API,
  // and how to integrate the new reader and writer?

  function NotebookPage (parentUUID = '', _uuuid = uuidgen ()) {
    this.uuid = _uuid
    this.metadata = { parent:parentUUID }
    // NB pages do not have associated .metadata and .content files,
    // so adding these properties is a bit of a hack for consistency's sake.
    // The parentUUID, otherwise stored in the metadata, is the name of the parent directory instead,
  }

}


// Exports
// -------

export { XochitlEntities }